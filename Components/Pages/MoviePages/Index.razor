@* @page "/movies"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorWebAppMovies.Models
@using BlazorWebAppMovies.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div>
    <form action="/movies" data-enhance data-permanent>
        <input type="search" name="titleFilter" />
        <input type="submit" value="Search" />
    </form>
</div>

<p>
    <a href="movies/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredMovies" Pagination="pagination">
    <PropertyColumn Property="movie => movie.Title" Sortable="true"/>
    <PropertyColumn Property="movie => movie.ReleaseDate" Title="Release Date"/>
    <PropertyColumn Property="movie => movie.Genre" />
    <PropertyColumn Property="movie => movie.Price" />
    <PropertyColumn Property="movie => movie.Rating" />


    <TemplateColumn Context="movie">
        <a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
        <a href="@($"movies/details?id={movie.Id}")">Details</a> |
        <a href="@($"movies/delete?id={movie.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />

@code {
    private BlazorWebAppMoviesContext context = default!;

    [SupplyParameterFromQuery]
    private string? TitleFilter { get; set; }

    private IQueryable<Movie> FilteredMovies => context.Movie
        .Where(m => m.Title.Contains(TitleFilter ?? string.Empty));

        private PaginationState pagination = new PaginationState{ ItemsPerPage = 5};

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
} *@

@page "/movies"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BlazorWebAppMovies.Models
@using BlazorWebAppMovies.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory

<PageTitle>Movies</PageTitle>

<div class="container">
    <h1>Movies</h1>

    <div class="mb-3">
        <form class="d-flex" action="/movies" data-enhance data-permanent>
            <input type="search" class="form-control me-2" name="titleFilter" placeholder="Search by title" />
            <button type="submit" class="btn btn-outline-primary">Search</button>
        </form>
    </div>

    <p>
        <a href="movies/create" class="btn btn-success">Create New</a>
    </p>

    <QuickGrid Class="table table-striped table-bordered" Items="FilteredMovies" Pagination="pagination">
        <PropertyColumn Property="movie => movie.Title" Sortable="true" Title="Title"/>
        <PropertyColumn Property="movie => movie.ReleaseDate" Title="Release Date" Format="yyyy-MM-dd"/>
        <PropertyColumn Property="movie => movie.Genre" Title="Genre"/>
        <PropertyColumn Property="movie => movie.Price" Title="Price" Format="C"/>
        <PropertyColumn Property="movie => movie.Rating" Title="Rating"/>

        <TemplateColumn Context="movie" Title="Actions">
            <a href="@($"movies/edit?id={movie.Id}")" class="btn btn-sm btn-primary me-1">Edit</a>
            <a href="@($"movies/details?id={movie.Id}")" class="btn btn-sm btn-info me-1">Details</a>
            <a href="@($"movies/delete?id={movie.Id}")" class="btn btn-sm btn-danger">Delete</a>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
</div>

@code {
    private BlazorWebAppMoviesContext context = default!;

    [SupplyParameterFromQuery]
    private string? TitleFilter { get; set; }

    private IQueryable<Movie> FilteredMovies => context.Movie
        .Where(m => m.Title.Contains(TitleFilter ?? string.Empty));

        private PaginationState pagination = new PaginationState{ ItemsPerPage = 5};

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}